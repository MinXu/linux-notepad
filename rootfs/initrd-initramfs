#initramfs 简介，一个新的 initial RAM disks 模型  (ramdisk/initrd/ramfs/tmpfs)
	ramdisk(image-ramfs):: 
		  need the file system driver(ex2fs)
		  fix size(lost more memory and more cache)
                  can be formated
		  is a block device 

	initrd:: 
      	          run the /linuxrc to told th kernel mount the real-root-dev (通过写入de_t 数据到 /proc/sys/kernel/real-root-dev)
                  the rootfs can not be network device
                  the rootfs is not the initrd self

        ramfs/tmpfs(cpio-ramfs):: 
                  not need the file system driver(only in the memory)
		  dynamic size
                  can not be formated
                  is not a block device
		  ***only in the memory
                  running the /init for the PID 1 process

        tmpfs::
		  ***in the swap or memory
                  limited the mount point max size
		  ---------> initramfs(a tmpfs exapmle)
				the initramfs can be built in kernel
				there is a init in the initramfs
			


#==================================================image-ramfs===================================================================================
#build kernel
make ARCH=arm CROSS_COMPILE= uImage
#or
make ARCH=arm CROSS_COMPILE= zImage 
mkimage -A arm -O linux -T kernel -C none -a 0x30008000 -e 0x30008000 -n "Linux kernel Image" -d zImage uImage-ramdisk


#create the ramdisk from rootfs file
dd if=/dev/zero of=ramdisk bs=1k count=8000
mkfs.ext2 -j ramdisk
sudo mount -o loop ramdisk /mnt
rm -rf /mnt/*
make ARCH=arm modules
make ARCH=arm INSTALL_MOD_PATH=/mnt modules_install 
sudo cp -R busybox/_install /mnt
ln -sv bin/busybox init
sudo umount /mnt
sudo cp ramdisk /boot/ramdisk

gzip -9 ramdisk
mkimage -A arm -O linux -T ramdisk -C none -a 0x600000 -e 0x600000 -n "ramdisk" -d ramdisk.gz         ramdisk-uboot.img
mkimage -A arm -O linux -T ramdisk -C none -a 0x600000 -e 0x600000 -n "ramdisk" -d initrd_cpio.img.gz ramdisk-uboot.img

#or from rootfs dir
genext2fs -b 4096 -d rootfs ramdisk
	#-b是指制作的ramdisk大小为4096K字节
	#-d是指要制作成ramdisk的根文件系统目录  

#or from rootfs file
mkfs.ext2 -F -v -m0 ramdisk
-F :  迫使 mke2fs 在 ramdisk.image 上运行 ,  否则 , mke2fs 会抱怨 ramdisk.image 不是块设备 . 
-v :  以 verbose 模式运行 
-m0 :  指定不必在文件系统上为 " 超级用户 " 保留任何 block.( 一般嵌入式 Linux 都是单用户系统 ). 

#============================================================cpio-ramfs=========================================================================
#extrac the initramfs to fix
cpio -i -F ../initramfs_data.cpio --no-absolute-filename 
#or
cpio -i -F ../initramfs_data.cpio >/mnt

#create the initramfs
gunzip ../initramfs_data.cpio.gz
cpio -i -t -F ../initramfs_data.cpio >list
cpio -o -H newc -O ../initramfs_data2.cpio <list
gzip -9 ../initramfs_data.cpio

find . -print| cpio -o -H newc |gzip -9> ../initramfs.cpio.gz 
cpio -i -t -F ../initramfs_data.cpio.gz|cpio -o -H newc |gzip -9> ../initramfs.cpio.gz


#x86 create the initramfs tools
#创建initramfs 
#在添加模块时，initramfs tools只会添加一些必要模块，用户可以通过在/etc/initramfs-tools/modules文件中加入模块名称来指定必须添加的模块。
mkinitramfs -o /boot/initrd.img 2.6.2  #其中2.6.26为/lib/modules下的目录名称.


#更新当前kernel的initramfs
update-initramfs -u


#new tool 创建initramfs in Arch Linux
mkinitcpio


mkinitrd类似于mkinitramfs，是用于生成initrd的一个工具。最基本的用法参考下面：
#如果需要指定哪些module在启动时必须load，需要加上--preload=module或者 --with=module这样的选项。 这两者的区别在于--preload指定的module会在/etc/modprobe.d/* 里声明的任何SCSI模块之前被加载，--with指定的module会在/etc/modprobe.d/* 里声明的任何SCSI模块之后被加载。

#另外还有一个选项需要被注意，即--builtin=module。在manual里这个选项的解释是：Act as if module is built into the kernel being used. mkinitrd will not look for this module, and will not emit an error if it does not exist. This option may be used multiple times.
#根据上面的解释，可以看出builtin选项另外还有一个取巧的用处。以我所用的平台Acer Aspire One为例， 我在用mkinitrd制作RAM disk镜像是出现一个错误“No module ohci-hcd found ...”，遇到这个情况，builtin选项就起作用了，用--builtin=ohci-hcd， mkinitrd就可以忽略ohci-hcd不存在这个事实了。
mkinitrd /boot/initrd.img $(uname -r)



#==============================================================================================================================================
#initramfs:
	1. running the /init (eg. ln -s /linuxrc init)
	2. not be readonly
	3. PID 1 process is /init
	4. if /init is a script, need the /lib(/lib64)
	5. sudo qemu-system-x86_64 -kernel /home/xumin/WorkDisk/WorkSpace/tcp-acceleration/tcp_source/linux-source-3.8.0/arch/x86_64/boot/bzImage -initrd ./hello2-initrd  -append root=/dev/ram0

#ramdisk:
	1. running the /sbin/init --------> /etc/rcS
	2. be readonly
	3. no PID 1 process
	4. sudo qemu-system-x86_64 -kernel /home/xumin/WorkDisk/WorkSpace/tcp-acceleration/tcp_source/linux-source-3.8.0/arch/x86_64/boot/bzImage -initrd ./hello2-initrd  -append root=/dev/ram0
	5. sudo qemu-system-x86_64 -kernel /home/xumin/WorkDisk/WorkSpace/tcp-acceleration/tcp_source/linux-source-3.8.0/arch/x86_64/boot/bzImage -initrd ./hello2-initrd  -append "root=/dev/ram0 rw"

