#http://www.ibm.com/developerworks/cn/linux/l-k26initrd/

#2．Linux2.4内核对 Initrd 的处理流程

#为了使读者清晰的了解Linux2.6内核initrd机制的变化，在重点介绍Linux2.6内核initrd之前，先对linux2.4内核的initrd进行一个简单的介绍。Linux2.4内核的initrd的格式是文件系统镜像文件，本文将其称为image-initrd，以区别后面介绍的linux2.6内核的cpio格式的initrd。 linux2.4内核对initrd的处理流程如下：

1. boot loader把内核以及/dev/initrd的内容加载到内存，/dev/initrd是由boot loader初始化的设备，存储着initrd。

2. 在内核初始化过程中，内核把 /dev/initrd 设备的内容解压缩并拷贝到 /dev/ram0 设备上。

3. 内核以可读写的方式把 /dev/ram0 设备挂载为原始的根文件系统。

4. 如果 /dev/ram0 被指定为真正的根文件系统，那么内核跳至最后一步正常启动。

5. 执行 initrd 上的 /linuxrc 文件，linuxrc 通常是一个脚本文件，负责加载内核访问根文件系统必须的驱动， 以及加载根文件系统。

6. /linuxrc 执行完毕，真正的根文件系统被挂载。

7. 如果真正的根文件系统存在 /initrd 目录，那么 /dev/ram0 将从 / 移动到 /initrd。否则如果 /initrd 目录不存在， /dev/ram0 将被卸载。

8. 在真正的根文件系统上进行正常启动过程 ，执行 /sbin/init。 linux2.4 内核的 initrd 的执行是作为内核启动的一个中间阶段，也就是说 initrd 的 /linuxrc 执行以后，内核会继续执行初始化代码，我们后面会看到这是 linux2.4 内核同 2.6 内核的 initrd 处理流程的一个显著区别。

#3．Linux2.6 内核对 Initrd 的处理流程

#linux2.6 内核支持两种格式的 initrd，一种是前面第 3 部分介绍的 linux2.4 内核那种传统格式的文件系统镜像－image-initrd，它的制作方法同 Linux2.4 内核的 initrd 一样，其核心文件就是 /linuxrc。另外一种格式的 initrd 是 cpio 格式的，这种格式的 initrd 从 linux2.5 起开始引入，使用 cpio 工具生成，其核心文件不再是 /linuxrc，而是 /init，本文将这种 initrd 称为 cpio-initrd。尽管 linux2.6 内核对 cpio-initrd和 image-initrd 这两种格式的 initrd 均支持，但对其处理流程有着显著的区别，下面分别介绍 linux2.6 内核对这两种 initrd 的处理流程。
#cpio-initrd 的处理流程

1． boot loader 把内核以及 initrd 文件加载到内存的特定位置。

2． 内核判断initrd的文件格式，如果是cpio格式。

3． 将initrd的内容释放到rootfs中。

4． 执行initrd中的/init文件，执行到这一点，内核的工作全部结束，完全交给/init文件处理。
image-initrd的处理流程

1． boot loader把内核以及initrd文件加载到内存的特定位置。

2． 内核判断initrd的文件格式，如果不是cpio格式，将其作为image-initrd处理。

3． 内核将initrd的内容保存在rootfs下的/initrd.image文件中。

4． 内核将/initrd.image的内容读入/dev/ram0设备中，也就是读入了一个内存盘中。

5． 接着内核以可读写的方式把/dev/ram0设备挂载为原始的根文件系统。

6． .如果/dev/ram0被指定为真正的根文件系统，那么内核跳至最后一步正常启动。

7． 执行initrd上的/linuxrc文件，linuxrc通常是一个脚本文件，负责加载内核访问根文件系统必须的驱动， 以及加载根文件系统。

8． /linuxrc执行完毕，常规根文件系统被挂载

9． 如果常规根文件系统存在/initrd目录，那么/dev/ram0将从/移动到/initrd。否则如果/initrd目录不存在， /dev/ram0将被卸载。

10． 在常规根文件系统上进行正常启动过程 ，执行/sbin/init。

#通过上面的流程介绍可知，Linux2.6内核对image-initrd的处理流程同linux2.4内核相比并没有显著的变化， cpio-initrd的处理流程相比于image-initrd的处理流程却有很大的区别，流程非常简单，在后面的源代码分析中，读者更能体会到处理的简捷。
#===============================================================================================================================================
#initramfs 简介，一个新的 initial RAM disks 模型  (ramdisk/initrd/ramfs/tmpfs)
	ramdisk(image-ramfs):: 
		  need the file system driver(ex2fs)
		  fix size(lost more memory and more cache)
                  can be formated
		  is a block device 

	initrd:: 
      	          run the /linuxrc(initrd is not the real rootfs) to install the driver and get the kernel mount the real-root-dev (通过写入de_t 数据到 /proc/sys/kernel/real-root-dev)
		  run the /sbin/init(initrd is the real rootfs)
                  the rootfs can not be network device
                  the rootfs is not the initrd self
		  

	loopback::
		  mount到文件
		  mount -o loop xxx uuu

        ramfs/tmpfs(cpio-ramfs):: 
                  not need the file system driver(only in the memory)
		  dynamic size
                  can not be formated
                  is not a block device
		  ***only in the memory
                  running the /init for the PID 1 process

        tmpfs::
		  ***in the swap or memory
                  limited the mount point max size
		  ---------> initramfs(a tmpfs exapmle)
				the initramfs can be built in kernel
				there is a init in the initramfs
				run the /init(script) to install the driver and mount the real rootfs
			


#==================================================image-ramfs===================================================================================
#build kernel
make ARCH=arm CROSS_COMPILE= uImage
#or
make ARCH=arm CROSS_COMPILE= zImage 
mkimage -A arm -O linux -T kernel -C none -a 0x30008000 -e 0x30008000 -n "Linux kernel Image" -d zImage uImage-ramdisk


#create the ramdisk from rootfs file
dd if=/dev/zero of=ramdisk bs=1k count=8000
mkfs.ext2 -j ramdisk
sudo mount -o loop ramdisk /mnt
rm -rf /mnt/*
make ARCH=arm modules
make ARCH=arm INSTALL_MOD_PATH=/mnt modules_install 
sudo cp -R busybox/_install /mnt
ln -sv bin/busybox init
sudo umount /mnt
sudo cp ramdisk /boot/ramdisk

gzip -9 ramdisk
mkimage -A arm -O linux -T ramdisk -C none -a 0x600000 -e 0x600000 -n "ramdisk" -d ramdisk.gz         ramdisk-uboot.img
mkimage -A arm -O linux -T ramdisk -C none -a 0x600000 -e 0x600000 -n "ramdisk" -d initrd_cpio.img.gz ramdisk-uboot.img

#or from rootfs dir
genext2fs -b 4096 -d rootfs ramdisk
	#-b是指制作的ramdisk大小为4096K字节
	#-d是指要制作成ramdisk的根文件系统目录  

#or from rootfs file
mkfs.ext2 -F -v -m0 ramdisk
-F :  迫使 mke2fs 在 ramdisk.image 上运行 ,  否则 , mke2fs 会抱怨 ramdisk.image 不是块设备 . 
-v :  以 verbose 模式运行 
-m0 :  指定不必在文件系统上为 " 超级用户 " 保留任何 block.( 一般嵌入式 Linux 都是单用户系统 ). 

#============================================================cpio-ramfs=========================================================================
#extrac the initramfs to fix
cpio -i -F ../initramfs_data.cpio --no-absolute-filename 
#or
cpio -i -F ../initramfs_data.cpio >/mnt

#create the initramfs
gunzip ../initramfs_data.cpio.gz
cpio -i -t -F ../initramfs_data.cpio >list
cpio -o -H newc -O ../initramfs_data2.cpio <list
gzip -9 ../initramfs_data.cpio

find . -print| cpio -o -H newc |gzip -9> ../initramfs.cpio.gz 
cpio -i -t -F ../initramfs_data.cpio.gz|cpio -o -H newc |gzip -9> ../initramfs.cpio.gz


#x86 create the initramfs tools
#创建initramfs 
#在添加模块时，initramfs tools只会添加一些必要模块，用户可以通过在/etc/initramfs-tools/modules文件中加入模块名称来指定必须添加的模块。
mkinitramfs -o /boot/initrd.img 2.6.2  #其中2.6.26为/lib/modules下的目录名称.


#更新当前kernel的initramfs
update-initramfs -u


#new tool 创建initramfs in Arch Linux
mkinitcpio


mkinitrd类似于mkinitramfs，是用于生成initrd的一个工具。最基本的用法参考下面：
#如果需要指定哪些module在启动时必须load，需要加上--preload=module或者 --with=module这样的选项。 这两者的区别在于--preload指定的module会在/etc/modprobe.d/* 里声明的任何SCSI模块之前被加载，--with指定的module会在/etc/modprobe.d/* 里声明的任何SCSI模块之后被加载。

#另外还有一个选项需要被注意，即--builtin=module。在manual里这个选项的解释是：Act as if module is built into the kernel being used. mkinitrd will not look for this module, and will not emit an error if it does not exist. This option may be used multiple times.
#根据上面的解释，可以看出builtin选项另外还有一个取巧的用处。以我所用的平台Acer Aspire One为例， 我在用mkinitrd制作RAM disk镜像是出现一个错误“No module ohci-hcd found ...”，遇到这个情况，builtin选项就起作用了，用--builtin=ohci-hcd， mkinitrd就可以忽略ohci-hcd不存在这个事实了。
mkinitrd /boot/initrd.img $(uname -r)



#==============================================================================================================================================
#initramfs:
	1. running the /init (eg. ln -s /linuxrc init)
	2. size is unlimited
	3. PID 1 process is /init
	4. if /init is a script, need the /lib(/lib64)
	5. sudo qemu-system-x86_64 -kernel /home/xumin/WorkDisk/WorkSpace/tcp-acceleration/tcp_source/linux-source-3.8.0/arch/x86_64/boot/bzImage -initrd ./hello2-initrd  -append root=/dev/ram0

#ramdisk:
	1. running the /sbin/init --------> /etc/rcS
	2. size is limited by kernel configure
	3. no PID 1 process
	4. sudo qemu-system-x86_64 -kernel /home/xumin/WorkDisk/WorkSpace/tcp-acceleration/tcp_source/linux-source-3.8.0/arch/x86_64/boot/bzImage -initrd ./hello2-initrd  -append root=/dev/ram0
	5. sudo qemu-system-x86_64 -kernel /home/xumin/WorkDisk/WorkSpace/tcp-acceleration/tcp_source/linux-source-3.8.0/arch/x86_64/boot/bzImage -initrd ./hello2-initrd  -append "root=/dev/ram0 rw"

