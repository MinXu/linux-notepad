#ARCH can be define when type make ARCH=ARM/make ARCH=CPU in command prompt
#ARCH = ARM

PWD=$(shell pwd)
PKG_NAME=testlib

# This is the version number of the package
VERSION_MAJOR:=1
VERSION_MINOR:=0
VERSION_PATCH:=0

# Name of the include file that will contain version information
VERSION_DIR:=$(PWD)/include
VERSION_FILE:=$(VERSION_DIR)/version.h

# END USER CONFIGURABLE SECTION
# (DO NOT EDIT BELOW THIS LINE)
#-------------------------------------------------------------------

#\1 extract([a-z]) a letter
#\2 extract([a-zA-Z0-9]*\) a letter and left letters
#\u convert uppercase
PKG_FIRST_UC:=$(shell echo $(PKG_NAME) | sed 's/\([a-z]\)\([a-zA-Z0-9]*\)/\u\1\2/g')
PKG_NAME_UC:=$(shell echo $(PKG_NAME) | tr a-z A-Z)

# Make sure our version of doxygen is used
DOXYGEN:=$(PWD)/doxygen/doxygen
DOXYFILE:=$(PWD)/doxygen/doxyfile.in
DOCS_DIR:=$(PWD)/docs/$(PKG_NAME)

define VERSION_TEXT
/***********************************
 * DO NOT EDIT THIS FILE DIRECTLY! *
 *  (This file is auto-generated)  *
 *    Instead, edit Makefile       *
 ***********************************/

#ifndef $(PKG_NAME_UC)_VERSION_H
#define $(PKG_NAME_UC)_VERSION_H

  #define $(PKG_NAME_UC)_VERSION_MAJOR   $(VERSION_MAJOR)
  #define $(PKG_NAME_UC)_VERSION_MINOR   $(VERSION_MINOR)
  #define $(PKG_NAME_UC)_VERSION_PATCH   $(VERSION_PATCH)

  #define _PVS(maj,min,pat) #maj "." #min "." #pat
  #define $(PKG_NAME_UC)_VERSION_STRING(maj,min,pat) _PVS(maj,min,pat)

  static const char *s$(PKG_FIRST_UC)Version =
    $(PKG_NAME_UC)_VERSION_STRING($(PKG_NAME_UC)_VERSION_MAJOR,
                                 $(PKG_NAME_UC)_VERSION_MINOR,
                                 $(PKG_NAME_UC)_VERSION_PATCH);

#endif

endef

INSTALL_DIR:=$(PWD)/install
SLIBPATH:=$(PWD)/static
SLIBNAME:=time
DLIBPATH:=$(PWD)/dynamic
DLIBNAME:=logger

#LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(PWD)/soLib
#CFLAGS only for C compiler and CPPFLAGS for C and C++ compiler
CPPFLAGS:=-std=c99 -ggdb -O3 -Wall -Wunused-variable -D_GNU_SOURCE -I$(PWD)/include
CFLAGS:=-Wl,-rpath=$(INSTALL_DIR)
LDFLAGS+=-L$(SLIBPATH) -L$(DLIBPATH)
LDLIBS:=-l$(SLIBNAME)  -lrt -l$(DLIBNAME)

ifeq ($(ARCH),ARM)
CROSS_COMPILE =/home/MinXu/Perforce/ti_ezsdk_phoenix_kernel_dev/linux/host/ub1004/x86/cs-2010.09/bin/arm-none-linux-gnueabi-
else
CROSS_COMPILE =
CFLAGS+=-m32 -march=native -mtune=native
endif
CC :=$(CROSS_COMPILE)gcc
LD :=$(CROSS_COMPILE)ld
AR :=$(CROSS_COMPILE)ar
STRIP := $(CROSS_COMPILE)strip

SLIB:=$(SLIBPATH)/lib$(SLIBNAME).a
#LDFLAGS+= -static
DLIB:=$(DLIBPATH)/lib$(DLIBNAME).so
CFLAGS+=-fPIC

TARGET:=main

SRC:=$(wildcard *.c)
OBJ:=$(patsubst %.c,%.o,$(SRC))
SLIBOBJ:=$(addprefix $(SLIBPATH)/, $(addsuffix .o, $(basename $(notdir $(wildcard $(SLIBPATH)/*.c)))))
DLIBOBJ:=$(addprefix $(DLIBPATH)/, $(addsuffix .o, $(basename $(notdir $(wildcard $(DLIBPATH)/*.c)))))

all:version lib target docs
lib:$(SLIBNAME) $(DLIBNAME)

version:
	@mkdir -p $(VERSION_DIR)
	@echo "$$VERSION_TEXT" > $(VERSION_FILE)

docs:
	@if [ ! -f $(DOXYGEN) ]; then \
	  echo "Doxygen not found! Have you installed the package?"; \
	  exit 1; \
	 fi
	@mkdir -p $(DOCS_DIR)
	@cat $(DOXYFILE) > Doxyfile
	@echo "PROJECT_NAME = $(PKG_NAME)" >> Doxyfile
	@echo "PROJECT_NUMBER = $(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)" >> Doxyfile
	@# This should come from package.txt eventually
	@echo "PROJECT_BRIEF = " >> Doxyfile
	@echo "INPUT = $(PKG_ROOT)" >> Doxyfile
	@echo "OUTPUT_DIRECTORY = $(DOCS_DIR)" >> Doxyfile
	@$(DOXYGEN) Doxyfile;

$(SLIBNAME):$(SLIB)
$(SLIBPATH)/%.o: %.c
	$(CC) $(CFLAGS) $(CPPFLAGS)-o $@ $< $(LDLIBS)
	$(STRIP) -S $@
$(SLIB): $(SLIBOBJ)
	$(AR) -rcvs $@ $^

$(DLIBNAME):$(DLIB)
$(DLIBPATH)/%.o: %.c
	$(CC) $(CFLAGS) $(CPPFLAGS)-o $@ $<
	$(STRIP) -S $@
$(DLIB): $(DLIBOBJ)
	$(CC) -shared $(CFLAGS) -o $@ $^

target:$(TARGET)
$(TARGET)-ld: $(OBJ)
	$(LD)  -o $@ $< $(LDFLAGS) $(LDLIBS)
$(TARGET)-cc: $(SRC)
	$(CC) $(CFLAGS) $(CPPFLAGS)  -o $@ $< $(LDFLAGS) $(LDLIBS)
	$(STRIP) -S $@

install:all
	@mkdir -p $(INSTALL_DIR)
	@cp -ar $(SLIB) $(INSTALL_DIR)
	@cp -ar $(DLIB) $(INSTALL_DIR)
	@cp -ar $(TARGET) $(INSTALL_DIR)

package:install
	@mkdir -p manifests
	@du -cha --time > manifests/$(PKG_NAME)_$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)
	@tree >> manifests/$(PKG_NAME)_$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)
	@tar czf $(PKG_NAME)_$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH).tgz include install docs manifests

clean:cleanobj cleandocs cleanversion cleanpackage
cleanobj:
	@rm -rf $(TARGET) $(OBJ)$(SOBJ) $(DOBJ) $(SLIB) $(DLIB)  $(SLIBOBJ) $(DLIBOBJ) $(INSTALL_DIR)
cleandocs:
	@rm -rf $(DOCS_DIR)
	@rm -f Doxyfile
	@rm -rf docs
	@rm -rf manifests
cleanversion:
	@rm -rf $(VERSION_FILE)
cleanpackage:
	@rm -rf $(PKG_NAME)*.tgz

.PHONY: all clean install lib static dynamic target docs version package
export VERSION_TEXT
