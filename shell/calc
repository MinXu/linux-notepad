let & (())====左右==========================================================================================
#在shell中可以使用let来指示下面是算术表达式，let表达式内变量不用加$
var=1
let "var+=1" 或 let var+=1 这种写法运算符间不能有空格 
echo $var

#output：
2

#这其中的let可以用(())代替，let ″j=i*6+2″等价于((j=i*6+2)), 就像很多的循环中用法一样
#注意：let必须是完整的算术表达式，即有等号两边
(()) & []====右边==========================================================================================
#(())、expr 可以只有等号右边的计算，由$((...))、$(expr ...)、`expr ...` 查看返回结果
var=1
((var++))     查看结果： echo $(())
echo $var

#output:
2

#还有一种写法：

var=1
var=$[$var+1]
echo $var

#output：
2
expr====右边==========================================================================================
#使用expr，需要注意的是其中的那个符号并不是单引号，而是“1”左边的那个键

#注意：将需要运算的表达式写入在expr 后面，保证参数与运算符号中间有空格隔开。

var=1
var=`expr $var + 1`
echo $var

#output：
2

====================================================================================================
#1:在shell 中$() 与 ``等效。执行中间包含的命令语句，返回执行结果。
#2:从效率来说let==(()) > expr > bc。let和(())运行是内建命令，使用相同的算法。
#3:let 和 expr 的运算是整数运算，不包括浮点预算。
#4:expr和bc是外部程序，expr的体积几乎等于bc的1/3，执行一次装入内存所消耗的时间就不一样。
#5:从运算能力来说，bc排第一位。



bc====================================================================================================
#上面的这几种做法都是只能处理整数运算，下面的这种做法是可以处理浮点数的：

var=1
var=`echo "scale=1;$var*2.0"|bc`  #bc预设输出整数，用scale 指定小数点下位数
echo $var

#output：
2.0


awk====================================================================================================
另外一个支持浮点运算的方法是awk：

var=1
var=`echo "$var 1"|awk '{printf("%g",$1+$2)}'`
echo $var

#output：
2

$ c=$(awk 'BEGIN{print 7.01*5-4.01 }')

$ echo $c
