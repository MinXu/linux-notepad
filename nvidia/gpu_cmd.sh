#Show the Displays(monitor)
$ xrandr

#Show the devices temperatures
$ sensors

#Show the graphic card info
$ inxi -G

#Show the graphic card info
$ lshw -c display

#Show the VAG devices on the PCI bus
$ lspci -vnn|grep -i VGA -A 12

#Show the graphic card drivers
$ dkms status

$ ubuntu-drivers devices

$ DRI_PRIME=1 glxinfo |grep 'OpenGl'
$ DRI_PRIME=0 glxinfo |grep 'OpenGl'

$ DRI_PRIME=1 glxears
$ DRI_PRIME=0 glxears

$ xrandr --setprovideroffloadsink nouveau Intel
$ xrandr --setprovideroutputsource Intel nouveau
$ xrandr --auto

$ cat /sys/kernel/debug/vgaswitcheroo/switch
$ echo ON  > /sys/kernel/debug/vgaswitcheroo/switch
$ echo OFF > /sys/kernel/debug/vgaswitcheroo/switch

$ software-properties-gtk

$ lsmod |grep nvidia
$ modprobe -R nvidia
$ modinfo nvidia

======================================================Soultion=========================================
#(1)Command:
#    1. vga_switcheroo			   -->have been deprecated?
#    2. acpi_call			   -->have been deprecated in favor of bbswitch.

#(2)BIOS:
#    1. Integrated Card
#    2. Discrete Card
#    3. Optimus (means nvidia will out provide any support, and the image generate by discrete nvidia display card will output by intel intgrated display card, the nvidia card is not connected to a monitor at all).
#               (never install the nvidia driver alone).

#(3)
#Bumblebee(Nvidia)			   -->use the nvidia card on a per program basis, when reuqired.
#Nvidia Prime(Nvidia)                       -->can switch gpu card, but it is software muxing, FPS is highest.
#Optimus Prime(Nouvea/Proper Linux Way(TM)) -->use the nvidia card on a per program basis, when required.

======================================================Bumblebee=========================================
#Bumblebee 2.2 or 2.3 did not have power saving bug the new 3.0 version have power saving features available that are automatically applied.
#Install the bumblebee, First remove the nvidia-prime.
$ sudo apt-get --purge remove the nvidia-prime
$ sudo apt-add-repository ppa:ubuntu-x-swat/x-updates
$ sudo apt-add-repository (--remove) ppa:bumblebee/stable
$ sudo apt-get install bumblebee bumblebee-nvidia primus linux-headers-$(uname -r)
#or for only power save
$ sudo apt-get install --no-install-recommends bumblebee linux-headers-$(uname -r)
#can still use nvidia by install the flowing package
$ sudo apt-get install bumblebee-nvidia
#For 32bit program
$ sudo apt-get install virtualgl-libs-ia32
$ sudo apt-get install virtualgl-libs:i386 libgl1-mesa-glx:i386 libc6:i386
#Instead of virtualgl, the flowing package get the better performance
$ primusrun glxgears
#Alternative that is nearly the same:
$ optirun -b primus glxgears

$ dpkg -l|egrep 'bumblebee|nvidia'
#bumblebee bumblebee-nvidia nvidia-304 nvidia-opencl-icd-304 nvidia-current nvidia-prime nvidia-settings

#Debin8 jessie install the Bumblebee nvidia with the backports repository
sudo apt-get install -t jessie-backports bumblebee-nvidia


======================================================Nvidia-Prime(Only Ubuntu) =========================================
$ sudo apt-get install nvidia-xxx nvidia-settings nvidia-prime
$ nvidia-settings   -->this tools can use the Nvidia Prime(Nvidia) function to switch gpu card(software muxing)
#Download: http://sourceforge.net/projects/virtualgl/file/VirtualGL
$ /opt/VirtualGL/bin/glxspheres64


======================================================Optimus Prime(Nouveau Opensource)=========================================
#In 14.04 even the default nouveau drivers now render graphics like a champ.
$ sudo apt-get --purge remove xserver-xorg-video-nouveau
or
sudo nano /etc/modprobe.d/blacklist-nouveau.conf
#and add the following lines:
	blacklist nouveau
	blacklist lbm-nouveau
	options nouveau modeset=0
	alias nouveau off
	alias lbm-nouveau off
#Disable the Kernel nouveau by typing the following commands:
$ echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf
$ sudo apt-get update-initramfs -u

======================================================Offical-Package-Bios=========================================
# Go to bios to close Optimus and open the nvidia discrete.
#Install:
$ ./NVIDIA-Linux-x86_64-375.26.run
#Uninstall:
$ ./NVIDIA-Linux-x86_64-375.26.run --uninstall
or
$ nvidia-uninstall
#Remove the configuration file generated by nvidia if any:
$ rm /etc/X11/xorg.conf
#Reinstall the Mesa package for GL:
$ apt-get --reinstall install libgl1-mesa-glx

#manual edit the /etc/X11/xorg.conf
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    Option         "NoLogo" "true"
#    Option         "ConnectedMonitor" "DFP"
EndSection


======================================================Repository-Package-Bios=========================================
$ sudo apt-add-repository (--remove) ppa:xorg-edgers/ppa
$ sudo apt-get --purge remove nvidia*
$ sudo apt-get autoremove
$ sudo apt-get install nvidia-xxx



======================================================Testing=========================================
#Download:https://nchc.dl.sourceforge.net/project/virtualgl/2.5.1/virtualgl_2.5.1_amd64.deb
$ glxinfo |grep OpenGL|grep render
$ optirun /opt/VirtualGL/bin/glxspheres64
$ /opt/VirtualGL/bin/glxspheres64
#or
$ glxgears -info
$ optirun glxgears -info



=====================================================CUDA============================================
#Verify: goto websit http://developer.nvidia.com/, check your GPU is CUDA-capable
$ update-pciids
$ lspci | grep -i nvidia

#Verify: check the distributions and release number
$ uname -m && cat /etc/*release

#Verify the System Has gcc, g++
$ gcc --version

#Verify the System has the Correct Kernel, Headers and Development Packages
$ sudo apt-get install linux-headers-$(uname -r)

#Download the NVIDIA CUDA Toolkit, http://developer.nvidia.com/cuda-downloads.

#Uninstall the previous cuda toolkit
$ sudo /usr/local/cuda-X.Y/bin/uninstall_cuda_X.Y.pl

#Uninstall the previous cuda driver
$ sudo /usr/bin/nvidia-uninstall

#Uninstall the Deb Package
$ sudo apt-get --purge remove <package_name>

#Deb Install cuda (package)
$ sudo dpkg -i cuda-repo-<distro>_<version>_<architecture>.deb
$ sudo apt-get update
$ sudo apt-get install cuda
$ sudo apt-get install cuda-drivers

#list cuda package
$ cat /var/lib/apt/lists/*cuda*Packages | grep "Package:"

#Mete-data
#cuda
#cuda-8-0
#cuda-toolkit-8-0
#cuda-runtime-8-0
#cuda-drivers


#Disable nonveau
$ lsmod | grep nouveau
$ echo "blacklist nouveau" > /etc/modprobe.d/blacklist-nouveau.conf
$ echo "options nouveau modeset=0" >> /etc/modprobe.d/blacklist-nouveau.conf
$ sudo update-initramfs -u


# Reboot into text mode (runlevel 3), graphical X server must not startup.
# add the 3 nomodeset at the boot arguments, in the grub.cfg or at startup grub select step.
$ sudo sh cuda_<version>_linux.run
#Install location
# CUDA Toolkit ---> /usr/local/cuda-8.0
# CUDA Samples ---> $(HOME)/NVIDIA_CUDA-8.0_Samples

#If the GPU used for display is not an NVIDIA GPU, the NVIDIA openGL
#libraries should not be installed. Otherwise, the openGL libraries used by the
#graphics driver of the non-NVIDIA GPU will be overwritten and the GUI will not
#work. If performing a silent installation, the --no-opengl-libs option should be used
#to prevent the openGL libraries from being installed.

#If the GPU used for display is an NVIDIA GPU, the X server configuration
#file, /etc/X11/xorg.conf , may need to be modified. In some cases, nvidia-
#xconfig can be used to automatically generate a xorg.conf file that works for
#the system. For non-standard systems, such as those with more than one GPU,
#it is recommended to manually edit the xorg.conf file

#Reinstallation of the NVIDIA driver
#Installing Mesa may overwrite the /usr/lib/libGL. so that was previously
#installed by the NVIDIA driver, so a reinstallation of the NVIDIA driver might be
#required after installing these libraries.


# nvidia-xconfig and manual edit the /etc/X11/xorg.cfg

#check the /dev/nvidia* nodes, non-exist to install it
# /dev/nvidia*
# mode(0666)
$ setuid nvidia-modprobe tool
# or manual install these nodes.
	#!/bin/bash
	/sbin/modprobe nvidia
	if [ "$?" -eq 0 ]; then
		# Count the number of NVIDIA controllers found.
		NVDEVS=`lspci | grep -i NVIDIA`
		N3D=`echo "$NVDEVS" | grep "3D controller" | wc -l`
		NVGA=`echo "$NVDEVS" | grep "VGA compatible controller" | wc -l`
		N=`expr $N3D + $NVGA - 1`
		for i in `seq 0 $N`; do
		mknod -m 666 /dev/nvidia$i c 195 $i
		done
		mknod -m 666 /dev/nvidiactl c 195 255
	else
		exit 1
	fi
	/sbin/modprobe nvidia-uvm
	if [ "$?" -eq 0 ]; then
		# Find out the major device number used by the nvidia-uvm driver
		D=`grep nvidia-uvm /proc/devices | awk '{print $1}'`
		mknod -m 666 /dev/nvidia-uvm c $D 0
	else
		exit 1
	fi


#Set the Environment(64bit or 32bit)
$ export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}}
$ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64\
	${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
#Or
$ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib\
	${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

#Verify the Driver Version
$ cat /proc/driver/nvidia/version

#Verify the version of the CUDA Toolkik
$ nvcc -V

#Install Writable Samples
$ cuda-install-samples-8.0.sh <dir>

#Testing
$ deviceQuery
$ bandwidthTest

#Install the source code for cuda-gdb, in /usr/local/cuda-8.0/extras

#Unsitall cuda
#Unsitall cuda toolkit
$ sudo /usr/local/cuda-8.0/bin/uninstall_cuda_8.0.pl
#Uninstall the NVIDIA Driver
$ sudo /usr/bin/nvidia-uninstall
$ sudo remove /etc/modprobe.d/blacklist-nouveau.conf
$ sudo update-initramfs


